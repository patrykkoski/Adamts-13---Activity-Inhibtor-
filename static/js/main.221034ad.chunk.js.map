{"version":3,"sources":["components/InputsRow.js","components/RowsList.js","components/MainTable.js","components/ChartComponent.js","components/PatientTable/SurveyList/SurveyRow/SurveyRow.js","components/PatientTable/SurveyList/SurveyList.js","components/PatientTable/PatientTable.js","App.js","utils/solveAbsorbationUtil.js","serviceWorker.js","index.js"],"names":["InputsRow","props","className","index","type","value","row","c1","onChange","e","handleC1Change","target","c2","handleC2Change","disabled","csr","percentage","handlePercentageChange","onClick","removeRow","RowsList","rows","map","id","key","MainTable","border","frame","rules","addRow","length","generateChart","CustomizedAxisTick","x","y","payload","transform","dy","textAnchor","fill","CustomTooltip","active","label","ChartComponent","React","memo","chartData","chartDataFromProps","data","d","console","log","parseFloat","Absorbancja","includes","slice","concat","margin","top","right","left","bottom","strokeDasharray","dataKey","tick","domain","position","offset","content","stroke","SurveyRow","patientName","placeholder","survey","p1","handleP1Change","p2","handleP2Change","psr","pPercentage","removePatient","SurveyList","controlSurvey","handlePPercentageChange","PatientTable","addPatient","canGenerateData","solvePatient","App","useState","setRows","setControlSurvey","setChartData","setCanGenerateData","newRows","splice","newRow","toFixed","sort","a","b","newData","s","absorbationXValues","absorbationYValues","xData","dataWithZero","y1","y2","yArrWithZero","xArrWithZero","shift","indexOf","push","yIndex","x1","x2","solveAbsorbation","twoNearestPoints","i","newControlSurvey","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.221034ad.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst InputsRow = props => {\r\n  return (\r\n    <tr className=\"inputRow\">\r\n      <td>{\"C\" + (props.index + 1)}</td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          value={props.row.c1}\r\n          onChange={e => props.handleC1Change(props.index, e.target.value)}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          value={props.row.c2}\r\n          onChange={e => props.handleC2Change(props.index, e.target.value)}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input type=\"text\" disabled value={props.row.csr}></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          value={props.row.percentage}\r\n          onChange={e =>\r\n            props.handlePercentageChange(props.index, e.target.value)\r\n          }\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <button onClick={() => props.removeRow(props.index)}>Usuń</button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default InputsRow;\r\n","import React from \"react\";\r\nimport InputsRow from \"./InputsRow\";\r\n\r\nconst RowsList = props => {\r\n  const listOfRows = props.rows.map((row, id) => {\r\n    return (\r\n      <InputsRow\r\n        key={id}\r\n        index={id}\r\n        row={row}\r\n        removeRow={props.removeRow}\r\n        handleC1Change={props.handleC1Change}\r\n        handleC2Change={props.handleC2Change}\r\n        handlePercentageChange={props.handlePercentageChange}\r\n      />\r\n    );\r\n  });\r\n\r\n  return listOfRows;\r\n};\r\n\r\nexport default RowsList;\r\n","import React from \"react\";\r\nimport RowsList from \"./RowsList\";\r\nimport \"../App.css\";\r\n\r\nconst MainTable = props => {\r\n  return (\r\n    <div className=\"form-wrapper\">\r\n      <div className=\"form-wrapper__header\">\r\n        <h3>ADAMTS13</h3>\r\n      </div>\r\n\r\n      <table className=\"main-table\" border=\"1\" frame=\"hsides\" rules=\"rows\">\r\n        <thead>\r\n          <tr>\r\n            <th>Numer pomiaru</th>\r\n            <th>1</th>\r\n            <th>2</th>\r\n            <th>Cśr</th>\r\n            <th>%</th>\r\n            <th>Usuń pomiar</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <RowsList\r\n            rows={props.rows}\r\n            removeRow={props.removeRow}\r\n            handleC1Change={props.handleC1Change}\r\n            handleC2Change={props.handleC2Change}\r\n            handlePercentageChange={props.handlePercentageChange}\r\n          />\r\n        </tbody>\r\n      </table>\r\n      <div className=\"form-wrapper__footer\">\r\n        <button onClick={props.addRow}>Dodaj pomiar</button>\r\n        {props.rows.length > 2 ? (\r\n          <button onClick={props.generateChart}>Generuj wykres</button>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default MainTable;\r\n","import React from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Label,\r\n  Tooltip,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\nimport \"../App.css\";\r\n\r\nconst CustomizedAxisTick = props => {\r\n  const { x, y, payload } = props;\r\n  return (\r\n    <g transform={`translate(${x},${y})`}>\r\n      <text dy={16} textAnchor=\"middle\" fill=\"#666\">\r\n        {payload.value}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nconst CustomTooltip = ({ active, payload, label }) => {\r\n  if (active) {\r\n    return (\r\n      <div className=\"custom-tooltip\">\r\n        <p className=\"label\">\r\n          {`P - ${label}%  `}\r\n          <br />\r\n          {`A - ${payload[0].value}`}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst ChartComponent = React.memo(props => {\r\n  const chartDataFromProps = props.data.map(d => {\r\n    console.log(d.x);\r\n    return { x: parseFloat(d.x), Absorbancja: parseFloat(d.y) };\r\n  });\r\n  let xDataFromProps = props.data.map(d => {\r\n    return d.x;\r\n  });\r\n  let chartData;\r\n  if (xDataFromProps.includes(\"0\")) {\r\n    chartData = chartDataFromProps.slice();\r\n  } else {\r\n    chartData = [{ x: 0, Absorbancja: 0 }].concat(chartDataFromProps);\r\n  }\r\n\r\n  return (\r\n    <div className=\"chart-wrapper\">\r\n      <div className=\"chart-wrapper__header\">\r\n        <h3>Wykres [Absorbancja / %]</h3>\r\n      </div>\r\n      <ResponsiveContainer>\r\n        <LineChart\r\n          data={chartData}\r\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis\r\n            dataKey=\"x\"\r\n            tick={<CustomizedAxisTick />}\r\n            domain={[0, \"dataMax\"]}\r\n          >\r\n            <Label value=\"%\" position=\"right\" offset={15} />\r\n          </XAxis>\r\n          <YAxis type=\"number\" domain={[0, \"dataMax\"]}>\r\n            <Label value=\"A\" position=\"insideTop\" />\r\n          </YAxis>\r\n          <Tooltip content={CustomTooltip} />\r\n          <Line\r\n            type=\"basic\"\r\n            dataKey=\"Absorbancja\"\r\n            stroke=\"rgb(103, 149, 209)\"\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default ChartComponent;\r\n","import React from \"react\";\r\nimport \"../../../../App.css\";\r\n\r\nconst SurveyRow = props => {\r\n  let patientName;\r\n  switch (props.index) {\r\n    case 0:\r\n      patientName = <input type=\"text\" placeholder={\"Control Low\"}></input>;\r\n      break;\r\n    case 1:\r\n      patientName = <input type=\"text\" placeholder={\"Control High\"}></input>;\r\n      break;\r\n    default:\r\n      patientName = <input type=\"text\" placeholder={\"ID pacjenta\"}></input>;\r\n      break;\r\n  }\r\n  return (\r\n    <tr className=\"inputRow\">\r\n      <td>{patientName}</td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          value={props.survey.p1}\r\n          onChange={e => props.handleP1Change(props.index, e.target.value)}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          value={props.survey.p2}\r\n          onChange={e => props.handleP2Change(props.index, e.target.value)}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input type=\"text\" disabled value={props.survey.psr}></input>\r\n      </td>\r\n      <td>\r\n        <input type=\"text\" value={props.survey.pPercentage} disabled></input>\r\n      </td>\r\n      <td>\r\n        {props.index > 1 ? (\r\n          <button onClick={() => props.removePatient(props.index)}>Usuń</button>\r\n        ) : null}\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default SurveyRow;\r\n","import React from \"react\";\r\nimport SurveyRow from \"./SurveyRow/SurveyRow\";\r\n\r\nconst SurveyList = props => {\r\n  const listOfRows = props.controlSurvey.map((survey, id) => {\r\n    return (\r\n      <SurveyRow\r\n        key={id}\r\n        index={id}\r\n        survey={survey}\r\n        removeRow={props.removeRow}\r\n        handleP1Change={props.handleP1Change}\r\n        handleP2Change={props.handleP2Change}\r\n        handlePPercentageChange={props.handlePercentageChange}\r\n        removePatient={props.removePatient}\r\n      />\r\n    );\r\n  });\r\n\r\n  return listOfRows;\r\n};\r\n\r\nexport default SurveyList;\r\n","import React from \"react\";\r\nimport SurveyList from \"./SurveyList/SurveyList\";\r\n\r\nconst PatientTable = props => {\r\n  return (\r\n    <div className=\"form-wrapper\">\r\n      <div className=\"form-wrapper__header\">\r\n        <h3>Tabela wyników</h3>\r\n      </div>\r\n      <table className=\"main-table\" border=\"1\" frame=\"hsides\" rules=\"rows\">\r\n        <thead>\r\n          <tr>\r\n            <th>Pomiar</th>\r\n            <th>1</th>\r\n            <th>2</th>\r\n            <th>Cśr</th>\r\n            <th>%</th>\r\n            <th>Usuń pomiar</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <SurveyList\r\n            controlSurvey={props.controlSurvey}\r\n            handleP1Change={props.handleP1Change}\r\n            handleP2Change={props.handleP2Change}\r\n            removePatient={props.removePatient}\r\n          />\r\n        </tbody>\r\n      </table>\r\n      <div className=\"form-wrapper__footer\">\r\n        <button onClick={props.addPatient}>Dodaj pacjenta</button>\r\n        {props.canGenerateData ? (\r\n          <button onClick={props.solvePatient}>Generuj wynik</button>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientTable;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport MainTable from \"./components/MainTable\";\nimport ChartComponent from \"./components/ChartComponent\";\nimport PatientTable from \"./components/PatientTable/PatientTable\";\nimport { twoNearestPoints } from \"./utils/solveAbsorbationUtil\";\n\nfunction App() {\n  const [rows, setRows] = useState([\n    { c1: \"\", c2: \"\", csr: \"\", percentage: \"\" }\n  ]);\n\n  const [controlSurvey, setControlSurvey] = useState([\n    { p1: \"\", p2: \"\", psr: \"\", pPercentage: \"\" },\n    { p1: \"\", p2: \"\", psr: \"\", pPercentage: \"\" },\n    { p1: \"\", p2: \"\", psr: \"\", pPercentage: \"\" }\n  ]);\n\n  const [chartData, setChartData] = useState([]);\n\n  const [canGenerateData, setCanGenerateData] = useState(false);\n\n  const addRow = e => {\n    const newRows = [...rows, { c1: \"\", c2: \"\", csr: \"\", percentage: \"\" }];\n    setRows(newRows);\n  };\n\n  const removeRow = index => {\n    const newRows = [...rows];\n    newRows.splice(index, 1);\n    setRows(newRows);\n  };\n\n  const handleC1Change = (index, value) => {\n    const newRow = rows[index];\n    newRow.c1 = value;\n    newRow.csr = ((parseFloat(value) + parseFloat(newRow.c2)) / 2).toFixed(2);\n    setRows([...rows], newRow);\n  };\n\n  const handleC2Change = (index, value) => {\n    const newRow = rows[index];\n    newRow.c2 = value;\n    newRow.csr = ((parseFloat(value) + parseFloat(newRow.c1)) / 2).toFixed(2);\n    setRows([...rows], newRow);\n  };\n\n  const handlePercentageChange = (index, value) => {\n    const newRow = rows[index];\n    newRow.percentage = value;\n    setRows([...rows], newRow);\n  };\n\n  const handleP1Change = (index, value) => {\n    const newRow = controlSurvey[index];\n    newRow.p1 = value;\n    newRow.psr = ((parseFloat(value) + parseFloat(newRow.p2)) / 2).toFixed(2);\n    setControlSurvey([...controlSurvey], newRow);\n  };\n\n  const handleP2Change = (index, value) => {\n    const newRow = controlSurvey[index];\n    newRow.p2 = value;\n    newRow.psr = ((parseFloat(value) + parseFloat(newRow.p1)) / 2).toFixed(2);\n    setControlSurvey([...controlSurvey], newRow);\n  };\n\n  const generateChart = () => {\n    if (rows.length > 2) {\n      const d = rows.map(row => {\n        return { x: row.percentage, y: row.csr };\n      });\n      setChartData(\n        d.sort((a, b) => (parseFloat(a.x) > parseFloat(b.x) ? 1 : -1))\n      );\n      setCanGenerateData(true);\n    }\n  };\n\n  const addPatient = () => {\n    const newControlSurvey = [\n      ...controlSurvey,\n      { p1: \"\", p2: \"\", psr: \"\", pPercentage: \"\" }\n    ];\n    setControlSurvey(newControlSurvey);\n  };\n\n  const removePatient = index => {\n    const newControlSurvey = [...controlSurvey];\n    newControlSurvey.splice(index, 1);\n    setControlSurvey(newControlSurvey);\n  };\n\n  const solvePatient = () => {\n    let newData = [];\n    newData = controlSurvey.map(survey => {\n      const s = survey.psr;\n      if (s !== \"\") {\n        return twoNearestPoints(chartData, s);\n      }\n      return null;\n    });\n    for (let i = 0; i < newData.length; i++) {\n      const newRow = controlSurvey[i];\n      newRow.pPercentage = parseFloat(newData[i]).toFixed(4);\n      setControlSurvey([...controlSurvey], newRow);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <MainTable\n        rows={rows}\n        addRow={addRow}\n        removeRow={removeRow}\n        handleC1Change={handleC1Change}\n        handleC2Change={handleC2Change}\n        handlePercentageChange={handlePercentageChange}\n        generateChart={generateChart}\n      />\n      <PatientTable\n        controlSurvey={controlSurvey}\n        handleP1Change={handleP1Change}\n        handleP2Change={handleP2Change}\n        canGenerateData={canGenerateData}\n        solvePatient={solvePatient}\n        addPatient={addPatient}\n        removePatient={removePatient}\n      />\n      <ChartComponent data={chartData} />\n    </div>\n  );\n}\n\nexport default App;\n","export const solveAbsorbation = (x1, y1, x2, y2, y) => {\r\n  let a, b;\r\n  if (x1 !== 0) {\r\n    b = (x1 * y2 - y1 * x2) / (x1 - x2);\r\n    a = (y1 - b) / x1;\r\n  } else {\r\n    if (y1 === 0) {\r\n      a = y2 / x2;\r\n      b = 0;\r\n    } else {\r\n      b = y1;\r\n      a = (y2 - b) / x2;\r\n    }\r\n  }\r\n\r\n  return (y - b) / a;\r\n};\r\n\r\nexport const twoNearestPoints = (data, y) => {\r\n  const xData = data.map(d => {\r\n    return parseFloat(d.x);\r\n  });\r\n  let absorbationXValues, absorbationYValues;\r\n  if (xData.includes(0)) {\r\n    absorbationXValues = xData.slice();\r\n    absorbationYValues = data.map(d => {\r\n      return parseFloat(d.y);\r\n    });\r\n  } else {\r\n    const dataWithZero = [{ x: 0, y: 0 }].concat(data);\r\n    absorbationYValues = dataWithZero.map(d => {\r\n      return parseFloat(d.y);\r\n    });\r\n    absorbationXValues = dataWithZero.map(d => {\r\n      return parseFloat(d.x);\r\n    });\r\n  }\r\n  let yArrWithZero = absorbationYValues.slice();\r\n  let xArrWithZero = absorbationXValues.slice();\r\n  // Jeśli wartość pacjenta występuje na wykresie\r\n  if (yArrWithZero.includes(parseFloat(y))) {\r\n    if (parseFloat(y) !== 0) {\r\n      yArrWithZero.shift();\r\n    }\r\n    if (parseFloat(y) === 0) {\r\n      return 0;\r\n    }\r\n    return data[yArrWithZero.indexOf(parseFloat(y))].x;\r\n  }\r\n  // Obliczenie wartości absorbancji pacjenta\r\n  yArrWithZero.push(parseFloat(y));\r\n  yArrWithZero.sort((a, b) => {\r\n    return a - b;\r\n  });\r\n  let y1, y2, x1, x2;\r\n  let yIndex = yArrWithZero.indexOf(parseFloat(y));\r\n  if (yIndex === yArrWithZero.length - 1) {\r\n    y1 = yArrWithZero[yArrWithZero.length - 3];\r\n    y2 = yArrWithZero[yArrWithZero.length - 2];\r\n  } else {\r\n    y1 = yArrWithZero[yIndex - 1];\r\n    y2 = yArrWithZero[yIndex + 1];\r\n  }\r\n  x1 = xArrWithZero[absorbationYValues.indexOf(y1)];\r\n  x2 = xArrWithZero[absorbationYValues.indexOf(y2)];\r\n  return solveAbsorbation(x1, y1, x2, y2, y);\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}